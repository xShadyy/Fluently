generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String            @id @default(uuid())
  username                    String            @unique
  email                       String            @unique
  password                    String
  createdAt                   DateTime          @default(now())
  hasCompletedProficiencyQuiz Boolean           @default(false)
  Session                     Session?
  quizCompletions            QuizCompletion[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id             String          @id @default(uuid())
  name           String
  type           GameType        @default(WORDS)
  questions      Question[]
  wordsQuestions WordsQuestion[]
}

model Question {
  id            String         @id @default(uuid())
  text          String
  gameId        String
  correctAnswer CorrectAnswer?
  options       Option[]
  game          Game           @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Option {
  id            String         @id @default(uuid())
  text          String
  questionId    String
  correctAnswer CorrectAnswer?
  question      Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model CorrectAnswer {
  id         String   @id @default(uuid())
  questionId String   @unique
  optionId   String   @unique
  option     Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model WordsQuestion {
  id            String              @id @default(uuid())
  text          String
  difficulty    Difficulty
  gameId        String
  correctAnswer WordsCorrectAnswer?
  options       WordsOption[]
  game          Game                @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model WordsOption {
  id              String              @id @default(uuid())
  text            String
  wordsQuestionId String
  correctAnswer   WordsCorrectAnswer?
  wordsQuestion   WordsQuestion       @relation(fields: [wordsQuestionId], references: [id], onDelete: Cascade)
}

model WordsCorrectAnswer {
  id              String        @id @default(uuid())
  wordsQuestionId String        @unique
  wordsOptionId   String        @unique
  wordsOption     WordsOption   @relation(fields: [wordsOptionId], references: [id], onDelete: Cascade)
  wordsQuestion   WordsQuestion @relation(fields: [wordsQuestionId], references: [id], onDelete: Cascade)
}

model QuizCompletion {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  difficulty Difficulty
  completedAt DateTime  @default(now())
  score     Int?       

  @@unique([userId, difficulty], name: "userId_difficulty")
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum GameType {
  WORDS
  ENGLISH_GRAMMAR_TEST
}
